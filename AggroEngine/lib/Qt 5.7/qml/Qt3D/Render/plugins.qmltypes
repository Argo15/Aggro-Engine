import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable Qt3D.Render 2.0'

Module {
    dependencies: ["Qt3D.Core 2.0"]
    Component {
        name: "QWindow"
        prototype: "QObject"
        exports: ["Qt3D.Render/Window 2.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Visibility"
            values: {
                "Hidden": 0,
                "AutomaticVisibility": 1,
                "Windowed": 2,
                "Minimized": 3,
                "Maximized": 4,
                "FullScreen": 5
            }
        }
        Property { name: "title"; type: "string" }
        Property { name: "modality"; type: "Qt::WindowModality" }
        Property { name: "flags"; type: "Qt::WindowFlags" }
        Property { name: "x"; type: "int" }
        Property { name: "y"; type: "int" }
        Property { name: "width"; type: "int" }
        Property { name: "height"; type: "int" }
        Property { name: "minimumWidth"; type: "int" }
        Property { name: "minimumHeight"; type: "int" }
        Property { name: "maximumWidth"; type: "int" }
        Property { name: "maximumHeight"; type: "int" }
        Property { name: "visible"; type: "bool" }
        Property { name: "active"; revision: 1; type: "bool"; isReadonly: true }
        Property { name: "visibility"; revision: 1; type: "Visibility" }
        Property { name: "contentOrientation"; type: "Qt::ScreenOrientation" }
        Property { name: "opacity"; revision: 1; type: "double" }
        Signal {
            name: "screenChanged"
            Parameter { name: "screen"; type: "QScreen"; isPointer: true }
        }
        Signal {
            name: "modalityChanged"
            Parameter { name: "modality"; type: "Qt::WindowModality" }
        }
        Signal {
            name: "windowStateChanged"
            Parameter { name: "windowState"; type: "Qt::WindowState" }
        }
        Signal {
            name: "windowTitleChanged"
            revision: 2
            Parameter { name: "title"; type: "string" }
        }
        Signal {
            name: "xChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "yChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "widthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "heightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "minimumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumWidthChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "maximumHeightChanged"
            Parameter { name: "arg"; type: "int" }
        }
        Signal {
            name: "visibleChanged"
            Parameter { name: "arg"; type: "bool" }
        }
        Signal {
            name: "visibilityChanged"
            revision: 1
            Parameter { name: "visibility"; type: "QWindow::Visibility" }
        }
        Signal { name: "activeChanged"; revision: 1 }
        Signal {
            name: "contentOrientationChanged"
            Parameter { name: "orientation"; type: "Qt::ScreenOrientation" }
        }
        Signal {
            name: "focusObjectChanged"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Signal {
            name: "opacityChanged"
            revision: 1
            Parameter { name: "opacity"; type: "double" }
        }
        Method { name: "requestActivate"; revision: 1 }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method { name: "show" }
        Method { name: "hide" }
        Method { name: "showMinimized" }
        Method { name: "showMaximized" }
        Method { name: "showFullScreen" }
        Method { name: "showNormal" }
        Method { name: "close"; type: "bool" }
        Method { name: "raise" }
        Method { name: "lower" }
        Method {
            name: "setTitle"
            Parameter { type: "string" }
        }
        Method {
            name: "setX"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setY"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setWidth"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setHeight"
            Parameter { name: "arg"; type: "int" }
        }
        Method {
            name: "setMinimumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMinimumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "setMaximumWidth"
            Parameter { name: "w"; type: "int" }
        }
        Method {
            name: "setMaximumHeight"
            Parameter { name: "h"; type: "int" }
        }
        Method {
            name: "alert"
            revision: 1
            Parameter { name: "msec"; type: "int" }
        }
        Method { name: "requestUpdate"; revision: 3 }
    }
    Component {
        name: "Qt3DRender::QAbstractLight"
        defaultProperty: "data"
        prototype: "Qt3DRender::QAbstractLight"
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "childNodes"; type: "Qt3DCore::QNode"; isList: true; isReadonly: true }
    }
    Component {
        name: "Qt3DRender::QAbstractTexture"
        defaultProperty: "data"
        prototype: "Qt3DRender::QAbstractTexture"
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "childNodes"; type: "Qt3DCore::QNode"; isList: true; isReadonly: true }
    }
    Component {
        name: "Qt3DRender::QAbstractTextureImage"
        prototype: "Qt3DCore::QNode"
        Property { name: "mipLevel"; type: "int" }
        Property { name: "layer"; type: "int" }
        Property { name: "face"; type: "Qt3DRender::QAbstractTexture::CubeMapFace" }
        Signal {
            name: "mipLevelChanged"
            Parameter { name: "mipLevel"; type: "int" }
        }
        Signal {
            name: "layerChanged"
            Parameter { name: "layer"; type: "int" }
        }
        Signal {
            name: "faceChanged"
            Parameter { name: "face"; type: "QAbstractTexture::CubeMapFace" }
        }
        Method {
            name: "setMipLevel"
            Parameter { name: "level"; type: "int" }
        }
        Method {
            name: "setLayer"
            Parameter { name: "layer"; type: "int" }
        }
        Method {
            name: "setFace"
            Parameter { name: "face"; type: "QAbstractTexture::CubeMapFace" }
        }
    }
    Component { name: "Qt3DRender::QAlphaCoverage"; prototype: "Qt3DRender::QRenderState" }
    Component {
        name: "Qt3DRender::QAlphaTest"
        prototype: "Qt3DRender::QRenderState"
        Enum {
            name: "AlphaFunction"
            values: {
                "Never": 512,
                "Always": 519,
                "Less": 513,
                "LessOrEqual": 515,
                "Equal": 514,
                "GreaterOrEqual": 518,
                "Greater": 516,
                "NotEqual": 517
            }
        }
        Property { name: "alphaFunction"; type: "AlphaFunction" }
        Property { name: "referenceValue"; type: "float" }
        Signal {
            name: "alphaFunctionChanged"
            Parameter { name: "alphaFunction"; type: "AlphaFunction" }
        }
        Signal {
            name: "referenceValueChanged"
            Parameter { name: "referenceValue"; type: "float" }
        }
        Method {
            name: "setAlphaFunction"
            Parameter { name: "alphaFunction"; type: "AlphaFunction" }
        }
        Method {
            name: "setReferenceValue"
            Parameter { name: "referenceValue"; type: "float" }
        }
    }
    Component {
        name: "Qt3DRender::QAttribute"
        defaultProperty: "data"
        prototype: "Qt3DRender::QAttribute"
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "childNodes"; type: "Qt3DCore::QNode"; isList: true; isReadonly: true }
    }
    Component {
        name: "Qt3DRender::QBlendEquation"
        prototype: "Qt3DRender::QRenderState"
        Enum {
            name: "BlendFunction"
            values: {
                "Add": 32774,
                "Subtract": 32778,
                "ReverseSubtract": 32779,
                "Min": 32775,
                "Max": 32776
            }
        }
        Property { name: "blendFunction"; type: "BlendFunction" }
        Signal {
            name: "blendFunctionChanged"
            Parameter { name: "blendFunction"; type: "BlendFunction" }
        }
        Method {
            name: "setBlendFunction"
            Parameter { name: "blendFunction"; type: "BlendFunction" }
        }
    }
    Component {
        name: "Qt3DRender::QBlendEquationArguments"
        prototype: "Qt3DRender::QRenderState"
        Enum {
            name: "Blending"
            values: {
                "Zero": 0,
                "One": 1,
                "SourceColor": 768,
                "SourceAlpha": 770,
                "Source1Alpha": 771,
                "Source1Color": 772,
                "DestinationColor": 774,
                "DestinationAlpha": 772,
                "SourceAlphaSaturate": 776,
                "ConstantColor": 32769,
                "ConstantAlpha": 32771,
                "OneMinusSourceColor": 769,
                "OneMinusSourceAlpha": 771,
                "OneMinusDestinationAlpha": 773,
                "OneMinusDestinationColor": 775,
                "OneMinusConstantColor": 32770,
                "OneMinusConstantAlpha": 32772,
                "OneMinusSource1Alpha": 32773,
                "OneMinusSource1Color0": 32774
            }
        }
        Property { name: "sourceRgb"; type: "Blending" }
        Property { name: "sourceAlpha"; type: "Blending" }
        Property { name: "destinationRgb"; type: "Blending" }
        Property { name: "destinationAlpha"; type: "Blending" }
        Property { name: "bufferIndex"; type: "int" }
        Signal {
            name: "sourceRgbChanged"
            Parameter { name: "sourceRgb"; type: "Blending" }
        }
        Signal {
            name: "sourceAlphaChanged"
            Parameter { name: "sourceAlpha"; type: "Blending" }
        }
        Signal {
            name: "destinationRgbChanged"
            Parameter { name: "destinationRgb"; type: "Blending" }
        }
        Signal {
            name: "destinationAlphaChanged"
            Parameter { name: "destinationAlpha"; type: "Blending" }
        }
        Signal {
            name: "sourceRgbaChanged"
            Parameter { name: "sourceRgba"; type: "Blending" }
        }
        Signal {
            name: "destinationRgbaChanged"
            Parameter { name: "destinationRgba"; type: "Blending" }
        }
        Signal {
            name: "bufferIndexChanged"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "setSourceRgb"
            Parameter { name: "sourceRgb"; type: "Blending" }
        }
        Method {
            name: "setDestinationRgb"
            Parameter { name: "destinationRgb"; type: "Blending" }
        }
        Method {
            name: "setSourceAlpha"
            Parameter { name: "sourceAlpha"; type: "Blending" }
        }
        Method {
            name: "setDestinationAlpha"
            Parameter { name: "destinationAlpha"; type: "Blending" }
        }
        Method {
            name: "setSourceRgba"
            Parameter { name: "sourceRgba"; type: "Blending" }
        }
        Method {
            name: "setDestinationRgba"
            Parameter { name: "destinationRgba"; type: "Blending" }
        }
        Method {
            name: "setBufferIndex"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "Qt3DRender::QBuffer"
        prototype: "Qt3DCore::QNode"
        Enum {
            name: "BufferType"
            values: {
                "VertexBuffer": 34962,
                "IndexBuffer": 34963,
                "PixelPackBuffer": 35051,
                "PixelUnpackBuffer": 35052,
                "UniformBuffer": 35345,
                "ShaderStorageBuffer": 37074
            }
        }
        Enum {
            name: "UsageType"
            values: {
                "StreamDraw": 35040,
                "StreamRead": 35041,
                "StreamCopy": 35042,
                "StaticDraw": 35044,
                "StaticRead": 35045,
                "StaticCopy": 35046,
                "DynamicDraw": 35048,
                "DynamicRead": 35049,
                "DynamicCopy": 35050
            }
        }
        Property { name: "type"; type: "BufferType" }
        Property { name: "usage"; type: "UsageType" }
        Property { name: "syncData"; type: "bool" }
        Signal {
            name: "dataChanged"
            Parameter { name: "bytes"; type: "QByteArray" }
        }
        Signal {
            name: "typeChanged"
            Parameter { name: "type"; type: "BufferType" }
        }
        Signal {
            name: "usageChanged"
            Parameter { name: "usage"; type: "UsageType" }
        }
        Signal {
            name: "syncDataChanged"
            Parameter { name: "syncData"; type: "bool" }
        }
        Method {
            name: "setType"
            Parameter { name: "type"; type: "BufferType" }
        }
        Method {
            name: "setUsage"
            Parameter { name: "usage"; type: "UsageType" }
        }
        Method {
            name: "setSyncData"
            Parameter { name: "syncData"; type: "bool" }
        }
    }
    Component {
        name: "Qt3DRender::QCamera"
        defaultProperty: "data"
        prototype: "Qt3DRender::QCamera"
        Property { name: "components"; type: "Qt3DCore::QComponent"; isList: true; isReadonly: true }
    }
    Component {
        name: "Qt3DRender::QCameraLens"
        prototype: "Qt3DCore::QComponent"
        Enum {
            name: "ProjectionType"
            values: {
                "OrthographicProjection": 0,
                "PerspectiveProjection": 1,
                "FrustumProjection": 2,
                "CustomProjection": 3
            }
        }
        Property { name: "projectionType"; type: "ProjectionType" }
        Property { name: "nearPlane"; type: "float" }
        Property { name: "farPlane"; type: "float" }
        Property { name: "fieldOfView"; type: "float" }
        Property { name: "aspectRatio"; type: "float" }
        Property { name: "left"; type: "float" }
        Property { name: "right"; type: "float" }
        Property { name: "bottom"; type: "float" }
        Property { name: "top"; type: "float" }
        Property { name: "projectionMatrix"; type: "QMatrix4x4" }
        Signal {
            name: "projectionTypeChanged"
            Parameter { name: "projectionType"; type: "QCameraLens::ProjectionType" }
        }
        Signal {
            name: "nearPlaneChanged"
            Parameter { name: "nearPlane"; type: "float" }
        }
        Signal {
            name: "farPlaneChanged"
            Parameter { name: "farPlane"; type: "float" }
        }
        Signal {
            name: "fieldOfViewChanged"
            Parameter { name: "fieldOfView"; type: "float" }
        }
        Signal {
            name: "aspectRatioChanged"
            Parameter { name: "aspectRatio"; type: "float" }
        }
        Signal {
            name: "leftChanged"
            Parameter { name: "left"; type: "float" }
        }
        Signal {
            name: "rightChanged"
            Parameter { name: "right"; type: "float" }
        }
        Signal {
            name: "bottomChanged"
            Parameter { name: "bottom"; type: "float" }
        }
        Signal {
            name: "topChanged"
            Parameter { name: "top"; type: "float" }
        }
        Signal {
            name: "projectionMatrixChanged"
            Parameter { name: "projectionMatrix"; type: "QMatrix4x4" }
        }
        Method {
            name: "setProjectionType"
            Parameter { name: "projectionType"; type: "ProjectionType" }
        }
        Method {
            name: "setNearPlane"
            Parameter { name: "nearPlane"; type: "float" }
        }
        Method {
            name: "setFarPlane"
            Parameter { name: "farPlane"; type: "float" }
        }
        Method {
            name: "setFieldOfView"
            Parameter { name: "fieldOfView"; type: "float" }
        }
        Method {
            name: "setAspectRatio"
            Parameter { name: "aspectRatio"; type: "float" }
        }
        Method {
            name: "setLeft"
            Parameter { name: "left"; type: "float" }
        }
        Method {
            name: "setRight"
            Parameter { name: "right"; type: "float" }
        }
        Method {
            name: "setBottom"
            Parameter { name: "bottom"; type: "float" }
        }
        Method {
            name: "setTop"
            Parameter { name: "top"; type: "float" }
        }
        Method {
            name: "setProjectionMatrix"
            Parameter { name: "projectionMatrix"; type: "QMatrix4x4" }
        }
    }
    Component {
        name: "Qt3DRender::QCameraSelector"
        prototype: "Qt3DRender::QFrameGraphNode"
        Property { name: "camera"; type: "Qt3DCore::QEntity"; isPointer: true }
        Signal {
            name: "cameraChanged"
            Parameter { name: "camera"; type: "Qt3DCore::QEntity"; isPointer: true }
        }
        Method {
            name: "setCamera"
            Parameter { name: "camera"; type: "Qt3DCore::QEntity"; isPointer: true }
        }
    }
    Component {
        name: "Qt3DRender::QClearBuffers"
        prototype: "Qt3DRender::QFrameGraphNode"
        Enum {
            name: "BufferType"
            values: {
                "None": 0,
                "ColorBuffer": 1,
                "DepthBuffer": 2,
                "StencilBuffer": 4,
                "DepthStencilBuffer": 6,
                "ColorDepthBuffer": 3,
                "ColorDepthStencilBuffer": 7,
                "AllBuffers": -1
            }
        }
        Property { name: "buffers"; type: "BufferType" }
        Property { name: "clearColor"; type: "QColor" }
        Property { name: "clearDepthValue"; type: "float" }
        Property { name: "clearStencilValue"; type: "int" }
        Signal {
            name: "buffersChanged"
            Parameter { name: "buffers"; type: "BufferType" }
        }
        Signal {
            name: "clearColorChanged"
            Parameter { name: "color"; type: "QColor" }
        }
        Signal {
            name: "clearDepthValueChanged"
            Parameter { name: "clearDepthValue"; type: "float" }
        }
        Signal {
            name: "clearStencilValueChanged"
            Parameter { name: "clearStencilValue"; type: "int" }
        }
        Method {
            name: "setBuffers"
            Parameter { name: "buffers"; type: "BufferType" }
        }
        Method {
            name: "setClearColor"
            Parameter { name: "color"; type: "QColor" }
        }
        Method {
            name: "setClearDepthValue"
            Parameter { name: "clearDepthValue"; type: "float" }
        }
        Method {
            name: "setClearStencilValue"
            Parameter { name: "clearStencilValue"; type: "int" }
        }
    }
    Component {
        name: "Qt3DRender::QClipPlane"
        defaultProperty: "data"
        prototype: "Qt3DRender::QClipPlane"
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "childNodes"; type: "Qt3DCore::QNode"; isList: true; isReadonly: true }
    }
    Component {
        name: "Qt3DRender::QColorMask"
        prototype: "Qt3DRender::QRenderState"
        Property { name: "redMasked"; type: "bool" }
        Property { name: "greenMasked"; type: "bool" }
        Property { name: "blueMasked"; type: "bool" }
        Property { name: "alphaMasked"; type: "bool" }
        Signal {
            name: "redMaskedChanged"
            Parameter { name: "redMasked"; type: "bool" }
        }
        Signal {
            name: "greenMaskedChanged"
            Parameter { name: "greenMasked"; type: "bool" }
        }
        Signal {
            name: "blueMaskedChanged"
            Parameter { name: "blueMasked"; type: "bool" }
        }
        Signal {
            name: "alphaMaskedChanged"
            Parameter { name: "alphaMasked"; type: "bool" }
        }
        Method {
            name: "setRedMasked"
            Parameter { name: "redMasked"; type: "bool" }
        }
        Method {
            name: "setGreenMasked"
            Parameter { name: "greenMasked"; type: "bool" }
        }
        Method {
            name: "setBlueMasked"
            Parameter { name: "blueMasked"; type: "bool" }
        }
        Method {
            name: "setAlphaMasked"
            Parameter { name: "alphaMasked"; type: "bool" }
        }
    }
    Component {
        name: "Qt3DRender::QComputeCommand"
        defaultProperty: "data"
        prototype: "Qt3DRender::QComputeCommand"
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "childNodes"; type: "Qt3DCore::QNode"; isList: true; isReadonly: true }
    }
    Component {
        name: "Qt3DRender::QCullFace"
        prototype: "Qt3DRender::QRenderState"
        Enum {
            name: "CullingMode"
            values: {
                "NoCulling": 0,
                "Front": 1028,
                "Back": 1029,
                "FrontAndBack": 1032
            }
        }
        Property { name: "mode"; type: "CullingMode" }
        Signal {
            name: "modeChanged"
            Parameter { name: "mode"; type: "CullingMode" }
        }
        Method {
            name: "setMode"
            Parameter { name: "mode"; type: "CullingMode" }
        }
    }
    Component {
        name: "Qt3DRender::QDepthTest"
        prototype: "Qt3DRender::QRenderState"
        Enum {
            name: "DepthFunction"
            values: {
                "Never": 512,
                "Always": 519,
                "Less": 513,
                "LessOrEqual": 515,
                "Equal": 514,
                "GreaterOrEqual": 518,
                "Greater": 516,
                "NotEqual": 517
            }
        }
        Property { name: "depthFunction"; type: "DepthFunction" }
        Signal {
            name: "depthFunctionChanged"
            Parameter { name: "depthFunction"; type: "DepthFunction" }
        }
        Method {
            name: "setDepthFunction"
            Parameter { name: "depthFunction"; type: "DepthFunction" }
        }
    }
    Component {
        name: "Qt3DRender::QDirectionalLight"
        defaultProperty: "data"
        prototype: "Qt3DRender::QDirectionalLight"
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "childNodes"; type: "Qt3DCore::QNode"; isList: true; isReadonly: true }
    }
    Component {
        name: "Qt3DRender::QDispatchCompute"
        defaultProperty: "data"
        prototype: "Qt3DRender::QDispatchCompute"
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "childNodes"; type: "Qt3DCore::QNode"; isList: true; isReadonly: true }
    }
    Component { name: "Qt3DRender::QDithering"; prototype: "Qt3DRender::QRenderState" }
    Component { name: "Qt3DRender::QEffect"; prototype: "Qt3DCore::QNode" }
    Component {
        name: "Qt3DRender::QFilterKey"
        prototype: "Qt3DCore::QNode"
        Property { name: "value"; type: "QVariant" }
        Property { name: "name"; type: "string" }
        Signal {
            name: "nameChanged"
            Parameter { name: "name"; type: "string" }
        }
        Signal {
            name: "valueChanged"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "setValue"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "setName"
            Parameter { name: "customType"; type: "string" }
        }
    }
    Component { name: "Qt3DRender::QFrameGraphNode"; prototype: "Qt3DCore::QNode" }
    Component {
        name: "Qt3DRender::QFrontFace"
        prototype: "Qt3DRender::QRenderState"
        Enum {
            name: "WindingDirection"
            values: {
                "ClockWise": 2304,
                "CounterClockWise": 2305
            }
        }
        Property { name: "direction"; type: "WindingDirection" }
        Signal {
            name: "directionChanged"
            Parameter { name: "direction"; type: "WindingDirection" }
        }
        Method {
            name: "setDirection"
            Parameter { name: "direction"; type: "WindingDirection" }
        }
    }
    Component { name: "Qt3DRender::QFrustumCulling"; prototype: "Qt3DRender::QFrameGraphNode" }
    Component {
        name: "Qt3DRender::QGeometry"
        prototype: "Qt3DCore::QNode"
        Property {
            name: "boundingVolumePositionAttribute"
            type: "Qt3DRender::QAttribute"
            isPointer: true
        }
        Signal {
            name: "boundingVolumePositionAttributeChanged"
            Parameter { name: "boundingVolumePositionAttribute"; type: "QAttribute"; isPointer: true }
        }
        Method {
            name: "setBoundingVolumePositionAttribute"
            Parameter { name: "boundingVolumePositionAttribute"; type: "QAttribute"; isPointer: true }
        }
    }
    Component {
        name: "Qt3DRender::QGeometryRenderer"
        prototype: "Qt3DCore::QComponent"
        Enum {
            name: "PrimitiveType"
            values: {
                "Points": 0,
                "Lines": 1,
                "LineLoop": 2,
                "LineStrip": 3,
                "Triangles": 4,
                "TriangleStrip": 5,
                "TriangleFan": 6,
                "LinesAdjacency": 10,
                "TrianglesAdjacency": 12,
                "LineStripAdjacency": 11,
                "TriangleStripAdjacency": 13,
                "Patches": 14
            }
        }
        Property { name: "instanceCount"; type: "int" }
        Property { name: "vertexCount"; type: "int" }
        Property { name: "indexOffset"; type: "int" }
        Property { name: "firstInstance"; type: "int" }
        Property { name: "restartIndexValue"; type: "int" }
        Property { name: "verticesPerPatch"; type: "int" }
        Property { name: "primitiveRestartEnabled"; type: "bool" }
        Property { name: "geometry"; type: "Qt3DRender::QGeometry"; isPointer: true }
        Property { name: "primitiveType"; type: "PrimitiveType" }
        Signal {
            name: "instanceCountChanged"
            Parameter { name: "instanceCount"; type: "int" }
        }
        Signal {
            name: "vertexCountChanged"
            Parameter { name: "vertexCount"; type: "int" }
        }
        Signal {
            name: "indexOffsetChanged"
            Parameter { name: "indexOffset"; type: "int" }
        }
        Signal {
            name: "firstInstanceChanged"
            Parameter { name: "firstInstance"; type: "int" }
        }
        Signal {
            name: "restartIndexValueChanged"
            Parameter { name: "restartIndexValue"; type: "int" }
        }
        Signal {
            name: "verticesPerPatchChanged"
            Parameter { name: "verticesPerPatch"; type: "int" }
        }
        Signal {
            name: "primitiveRestartEnabledChanged"
            Parameter { name: "primitiveRestartEnabled"; type: "bool" }
        }
        Signal {
            name: "geometryChanged"
            Parameter { name: "geometry"; type: "QGeometry"; isPointer: true }
        }
        Signal {
            name: "primitiveTypeChanged"
            Parameter { name: "primitiveType"; type: "PrimitiveType" }
        }
        Method {
            name: "setInstanceCount"
            Parameter { name: "instanceCount"; type: "int" }
        }
        Method {
            name: "setVertexCount"
            Parameter { name: "vertexCount"; type: "int" }
        }
        Method {
            name: "setIndexOffset"
            Parameter { name: "indexOffset"; type: "int" }
        }
        Method {
            name: "setFirstInstance"
            Parameter { name: "firstInstance"; type: "int" }
        }
        Method {
            name: "setRestartIndexValue"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "setVerticesPerPatch"
            Parameter { name: "verticesPerPatch"; type: "int" }
        }
        Method {
            name: "setPrimitiveRestartEnabled"
            Parameter { name: "enabled"; type: "bool" }
        }
        Method {
            name: "setGeometry"
            Parameter { name: "geometry"; type: "QGeometry"; isPointer: true }
        }
        Method {
            name: "setPrimitiveType"
            Parameter { name: "primitiveType"; type: "PrimitiveType" }
        }
    }
    Component {
        name: "Qt3DRender::QGraphicsApiFilter"
        prototype: "QObject"
        exports: ["Qt3D.Render/GraphicsApiFilter 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Api"
            values: {
                "OpenGLES": 2,
                "OpenGL": 1
            }
        }
        Enum {
            name: "OpenGLProfile"
            values: {
                "NoProfile": 0,
                "CoreProfile": 1,
                "CompatibilityProfile": 2
            }
        }
        Property { name: "api"; type: "Qt3DRender::QGraphicsApiFilter::Api" }
        Property { name: "profile"; type: "Qt3DRender::QGraphicsApiFilter::OpenGLProfile" }
        Property { name: "minorVersion"; type: "int" }
        Property { name: "majorVersion"; type: "int" }
        Property { name: "extensions"; type: "QStringList" }
        Property { name: "vendor"; type: "string" }
        Signal {
            name: "apiChanged"
            Parameter { name: "api"; type: "Api" }
        }
        Signal {
            name: "profileChanged"
            Parameter { name: "profile"; type: "OpenGLProfile" }
        }
        Signal {
            name: "minorVersionChanged"
            Parameter { name: "minorVersion"; type: "int" }
        }
        Signal {
            name: "majorVersionChanged"
            Parameter { name: "majorVersion"; type: "int" }
        }
        Signal {
            name: "extensionsChanged"
            Parameter { name: "extensions"; type: "QStringList" }
        }
        Signal {
            name: "vendorChanged"
            Parameter { name: "vendor"; type: "string" }
        }
        Signal { name: "graphicsApiFilterChanged" }
        Method {
            name: "setApi"
            Parameter { name: "api"; type: "Api" }
        }
        Method {
            name: "setProfile"
            Parameter { name: "profile"; type: "OpenGLProfile" }
        }
        Method {
            name: "setMinorVersion"
            Parameter { name: "minorVersion"; type: "int" }
        }
        Method {
            name: "setMajorVersion"
            Parameter { name: "majorVersion"; type: "int" }
        }
        Method {
            name: "setExtensions"
            Parameter { name: "extensions"; type: "QStringList" }
        }
        Method {
            name: "setVendor"
            Parameter { name: "vendor"; type: "string" }
        }
    }
    Component {
        name: "Qt3DRender::QLayer"
        defaultProperty: "data"
        prototype: "Qt3DRender::QLayer"
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "childNodes"; type: "Qt3DCore::QNode"; isList: true; isReadonly: true }
    }
    Component {
        name: "Qt3DRender::QLayerFilter"
        defaultProperty: "data"
        prototype: "Qt3DRender::QLayerFilter"
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "childNodes"; type: "Qt3DCore::QNode"; isList: true; isReadonly: true }
    }
    Component {
        name: "Qt3DRender::QMaterial"
        prototype: "Qt3DCore::QComponent"
        Property { name: "effect"; type: "Qt3DRender::QEffect"; isPointer: true }
        Signal {
            name: "effectChanged"
            Parameter { name: "effect"; type: "QEffect"; isPointer: true }
        }
        Method {
            name: "setEffect"
            Parameter { name: "effect"; type: "QEffect"; isPointer: true }
        }
    }
    Component {
        name: "Qt3DRender::QMesh"
        prototype: "Qt3DRender::QGeometryRenderer"
        Property { name: "source"; type: "QUrl" }
        Property { name: "meshName"; type: "string" }
        Signal {
            name: "sourceChanged"
            Parameter { name: "source"; type: "QUrl" }
        }
        Signal {
            name: "meshNameChanged"
            Parameter { name: "meshName"; type: "string" }
        }
        Method {
            name: "setSource"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method {
            name: "setMeshName"
            Parameter { name: "meshName"; type: "string" }
        }
    }
    Component {
        name: "Qt3DRender::QMultiSampleAntiAliasing"
        prototype: "Qt3DRender::QRenderState"
    }
    Component {
        name: "Qt3DRender::QNoDepthMask"
        defaultProperty: "data"
        prototype: "Qt3DRender::QNoDepthMask"
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "childNodes"; type: "Qt3DCore::QNode"; isList: true; isReadonly: true }
    }
    Component { name: "Qt3DRender::QNoDraw"; prototype: "Qt3DRender::QFrameGraphNode" }
    Component {
        name: "Qt3DRender::QObjectPicker"
        defaultProperty: "data"
        prototype: "Qt3DRender::QObjectPicker"
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "childNodes"; type: "Qt3DCore::QNode"; isList: true; isReadonly: true }
    }
    Component {
        name: "Qt3DRender::QParameter"
        defaultProperty: "data"
        prototype: "Qt3DRender::QParameter"
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "childNodes"; type: "Qt3DCore::QNode"; isList: true; isReadonly: true }
    }
    Component {
        name: "Qt3DRender::QPickEvent"
        prototype: "QObject"
        exports: ["Qt3D.Render/PickEvent 2.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "accepted"; type: "bool" }
        Property { name: "position"; type: "QPointF"; isReadonly: true }
        Property { name: "distance"; type: "float"; isReadonly: true }
        Property { name: "localIntersection"; type: "QVector3D"; isReadonly: true }
        Property { name: "worldIntersection"; type: "QVector3D"; isReadonly: true }
        Signal {
            name: "acceptedChanged"
            Parameter { name: "accepted"; type: "bool" }
        }
        Method {
            name: "setAccepted"
            Parameter { name: "accepted"; type: "bool" }
        }
    }
    Component {
        name: "Qt3DRender::QPickingSettings"
        prototype: "Qt3DCore::QNode"
        Enum {
            name: "PickMethod"
            values: {
                "BoundingVolumePicking": 0,
                "TrianglePicking": 1
            }
        }
        Enum {
            name: "PickResultMode"
            values: {
                "NearestPick": 0,
                "AllPicks": 1
            }
        }
        Property { name: "pickMethod"; type: "PickMethod" }
        Property { name: "pickResultMode"; type: "PickResultMode" }
        Signal {
            name: "pickMethodChanged"
            Parameter { name: "pickMethod"; type: "QPickingSettings::PickMethod" }
        }
        Signal {
            name: "pickResultModeChanged"
            Parameter { name: "pickResult"; type: "QPickingSettings::PickResultMode" }
        }
        Method {
            name: "setPickMethod"
            Parameter { name: "pickMethod"; type: "PickMethod" }
        }
        Method {
            name: "setPickResultMode"
            Parameter { name: "pickResultMode"; type: "PickResultMode" }
        }
    }
    Component {
        name: "Qt3DRender::QPointLight"
        defaultProperty: "data"
        prototype: "Qt3DRender::QPointLight"
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "childNodes"; type: "Qt3DCore::QNode"; isList: true; isReadonly: true }
    }
    Component {
        name: "Qt3DRender::QPointSize"
        defaultProperty: "data"
        prototype: "Qt3DRender::QPointSize"
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "childNodes"; type: "Qt3DCore::QNode"; isList: true; isReadonly: true }
    }
    Component {
        name: "Qt3DRender::QPolygonOffset"
        prototype: "Qt3DRender::QRenderState"
        Property { name: "scaleFactor"; type: "float" }
        Property { name: "depthSteps"; type: "float" }
        Signal {
            name: "scaleFactorChanged"
            Parameter { name: "scaleFactor"; type: "float" }
        }
        Signal {
            name: "depthStepsChanged"
            Parameter { name: "depthSteps"; type: "float" }
        }
        Method {
            name: "setScaleFactor"
            Parameter { name: "scaleFactor"; type: "float" }
        }
        Method {
            name: "setDepthSteps"
            Parameter { name: "depthSteps"; type: "float" }
        }
    }
    Component {
        name: "Qt3DRender::QRenderPass"
        prototype: "Qt3DCore::QNode"
        Property { name: "shaderProgram"; type: "Qt3DRender::QShaderProgram"; isPointer: true }
        Signal {
            name: "shaderProgramChanged"
            Parameter { name: "shaderProgram"; type: "QShaderProgram"; isPointer: true }
        }
        Method {
            name: "setShaderProgram"
            Parameter { name: "shaderProgram"; type: "QShaderProgram"; isPointer: true }
        }
    }
    Component { name: "Qt3DRender::QRenderPassFilter"; prototype: "Qt3DRender::QFrameGraphNode" }
    Component {
        name: "Qt3DRender::QRenderSettings"
        defaultProperty: "activeFrameGraph"
        prototype: "Qt3DRender::QRenderSettings"
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "childNodes"; type: "Qt3DCore::QNode"; isList: true; isReadonly: true }
    }
    Component { name: "Qt3DRender::QRenderState"; prototype: "Qt3DCore::QNode" }
    Component { name: "Qt3DRender::QRenderStateSet"; prototype: "Qt3DRender::QFrameGraphNode" }
    Component {
        name: "Qt3DRender::QRenderSurfaceSelector"
        defaultProperty: "data"
        prototype: "Qt3DRender::QRenderSurfaceSelector"
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "childNodes"; type: "Qt3DCore::QNode"; isList: true; isReadonly: true }
    }
    Component { name: "Qt3DRender::QRenderTarget"; prototype: "Qt3DCore::QComponent" }
    Component {
        name: "Qt3DRender::QRenderTargetOutput"
        prototype: "Qt3DCore::QNode"
        Enum {
            name: "AttachmentPoint"
            values: {
                "Color0": 0,
                "Color1": 1,
                "Color2": 2,
                "Color3": 3,
                "Color4": 4,
                "Color5": 5,
                "Color6": 6,
                "Color7": 7,
                "Color8": 8,
                "Color9": 9,
                "Color10": 10,
                "Color11": 11,
                "Color12": 12,
                "Color13": 13,
                "Color14": 14,
                "Color15": 15,
                "Depth": 16,
                "Stencil": 17,
                "DepthStencil": 18
            }
        }
        Property { name: "attachmentPoint"; type: "AttachmentPoint" }
        Property { name: "texture"; type: "QAbstractTexture"; isPointer: true }
        Property { name: "mipLevel"; type: "int" }
        Property { name: "layer"; type: "int" }
        Property { name: "face"; type: "QAbstractTexture::CubeMapFace" }
        Signal {
            name: "attachmentPointChanged"
            Parameter { name: "attachmentPoint"; type: "AttachmentPoint" }
        }
        Signal {
            name: "textureChanged"
            Parameter { name: "texture"; type: "QAbstractTexture"; isPointer: true }
        }
        Signal {
            name: "mipLevelChanged"
            Parameter { name: "mipLevel"; type: "int" }
        }
        Signal {
            name: "layerChanged"
            Parameter { name: "layer"; type: "int" }
        }
        Signal {
            name: "faceChanged"
            Parameter { name: "face"; type: "QAbstractTexture::CubeMapFace" }
        }
        Method {
            name: "setAttachmentPoint"
            Parameter { name: "attachmentPoint"; type: "AttachmentPoint" }
        }
        Method {
            name: "setTexture"
            Parameter { name: "texture"; type: "QAbstractTexture"; isPointer: true }
        }
        Method {
            name: "setMipLevel"
            Parameter { name: "level"; type: "int" }
        }
        Method {
            name: "setLayer"
            Parameter { name: "layer"; type: "int" }
        }
        Method {
            name: "setFace"
            Parameter { name: "face"; type: "QAbstractTexture::CubeMapFace" }
        }
    }
    Component {
        name: "Qt3DRender::QRenderTargetSelector"
        prototype: "Qt3DRender::QFrameGraphNode"
        Property { name: "target"; type: "Qt3DRender::QRenderTarget"; isPointer: true }
        Signal {
            name: "targetChanged"
            Parameter { name: "target"; type: "QRenderTarget"; isPointer: true }
        }
        Method {
            name: "setTarget"
            Parameter { name: "target"; type: "QRenderTarget"; isPointer: true }
        }
    }
    Component {
        name: "Qt3DRender::QSceneLoader"
        prototype: "Qt3DCore::QComponent"
        Enum {
            name: "Status"
            values: {
                "None": 0,
                "Loading": 1,
                "Ready": 2,
                "Error": 3
            }
        }
        Property { name: "source"; type: "QUrl" }
        Property { name: "status"; type: "Status"; isReadonly: true }
        Signal {
            name: "sourceChanged"
            Parameter { name: "source"; type: "QUrl" }
        }
        Signal {
            name: "statusChanged"
            Parameter { name: "status"; type: "Status" }
        }
        Method {
            name: "setSource"
            Parameter { name: "arg"; type: "QUrl" }
        }
        Method {
            name: "setStatus"
            Parameter { name: "status"; type: "Status" }
        }
    }
    Component {
        name: "Qt3DRender::QScissorTest"
        defaultProperty: "data"
        prototype: "Qt3DRender::QScissorTest"
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "childNodes"; type: "Qt3DCore::QNode"; isList: true; isReadonly: true }
    }
    Component {
        name: "Qt3DRender::QSeamlessCubemap"
        defaultProperty: "data"
        prototype: "Qt3DRender::QSeamlessCubemap"
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "childNodes"; type: "Qt3DCore::QNode"; isList: true; isReadonly: true }
    }
    Component { name: "Qt3DRender::QShaderData"; prototype: "Qt3DCore::QComponent" }
    Component {
        name: "Qt3DRender::QShaderProgram"
        prototype: "Qt3DCore::QNode"
        Enum {
            name: "ShaderType"
            values: {
                "Vertex": 0,
                "Fragment": 1,
                "TessellationControl": 2,
                "TessellationEvaluation": 3,
                "Geometry": 4,
                "Compute": 5
            }
        }
        Property { name: "vertexShaderCode"; type: "QByteArray" }
        Property { name: "tessellationControlShaderCode"; type: "QByteArray" }
        Property { name: "tessellationEvaluationShaderCode"; type: "QByteArray" }
        Property { name: "geometryShaderCode"; type: "QByteArray" }
        Property { name: "fragmentShaderCode"; type: "QByteArray" }
        Property { name: "computeShaderCode"; type: "QByteArray" }
        Signal {
            name: "vertexShaderCodeChanged"
            Parameter { name: "vertexShaderCode"; type: "QByteArray" }
        }
        Signal {
            name: "tessellationControlShaderCodeChanged"
            Parameter { name: "tessellationControlShaderCode"; type: "QByteArray" }
        }
        Signal {
            name: "tessellationEvaluationShaderCodeChanged"
            Parameter { name: "tessellationEvaluationShaderCode"; type: "QByteArray" }
        }
        Signal {
            name: "geometryShaderCodeChanged"
            Parameter { name: "geometryShaderCode"; type: "QByteArray" }
        }
        Signal {
            name: "fragmentShaderCodeChanged"
            Parameter { name: "fragmentShaderCode"; type: "QByteArray" }
        }
        Signal {
            name: "computeShaderCodeChanged"
            Parameter { name: "computeShaderCode"; type: "QByteArray" }
        }
        Method {
            name: "setVertexShaderCode"
            Parameter { name: "vertexShaderCode"; type: "QByteArray" }
        }
        Method {
            name: "setTessellationControlShaderCode"
            Parameter { name: "tessellationControlShaderCode"; type: "QByteArray" }
        }
        Method {
            name: "setTessellationEvaluationShaderCode"
            Parameter { name: "tessellationEvaluationShaderCode"; type: "QByteArray" }
        }
        Method {
            name: "setGeometryShaderCode"
            Parameter { name: "geometryShaderCode"; type: "QByteArray" }
        }
        Method {
            name: "setFragmentShaderCode"
            Parameter { name: "fragmentShaderCode"; type: "QByteArray" }
        }
        Method {
            name: "setComputeShaderCode"
            Parameter { name: "computeShaderCode"; type: "QByteArray" }
        }
        Method {
            name: "loadSource"
            type: "QByteArray"
            Parameter { name: "sourceUrl"; type: "QUrl" }
        }
    }
    Component {
        name: "Qt3DRender::QSortPolicy"
        prototype: "Qt3DRender::QFrameGraphNode"
        Enum {
            name: "SortType"
            values: {
                "StateChangeCost": 1,
                "BackToFront": 2,
                "Material": 4
            }
        }
        Property { name: "sortTypes"; type: "QVector<int>" }
        Signal {
            name: "sortTypesChanged"
            Parameter { name: "sortTypes"; type: "QVector<SortType>" }
        }
        Signal {
            name: "sortTypesChanged"
            Parameter { name: "sortTypes"; type: "QVector<int>" }
        }
        Method {
            name: "setSortTypes"
            Parameter { name: "sortTypes"; type: "QVector<SortType>" }
        }
        Method {
            name: "setSortTypes"
            Parameter { name: "sortTypesInt"; type: "QVector<int>" }
        }
    }
    Component {
        name: "Qt3DRender::QSpotLight"
        prototype: "Qt3DRender::QAbstractLight"
        Property { name: "constantAttenuation"; type: "float" }
        Property { name: "linearAttenuation"; type: "float" }
        Property { name: "quadraticAttenuation"; type: "float" }
        Property { name: "localDirection"; type: "QVector3D" }
        Property { name: "cutOffAngle"; type: "float" }
        Signal {
            name: "constantAttenuationChanged"
            Parameter { name: "constantAttenuation"; type: "float" }
        }
        Signal {
            name: "linearAttenuationChanged"
            Parameter { name: "linearAttenuation"; type: "float" }
        }
        Signal {
            name: "quadraticAttenuationChanged"
            Parameter { name: "quadraticAttenuation"; type: "float" }
        }
        Signal {
            name: "localDirectionChanged"
            Parameter { name: "localDirection"; type: "QVector3D" }
        }
        Signal {
            name: "cutOffAngleChanged"
            Parameter { name: "cutOffAngle"; type: "float" }
        }
        Method {
            name: "setConstantAttenuation"
            Parameter { name: "value"; type: "float" }
        }
        Method {
            name: "setLinearAttenuation"
            Parameter { name: "value"; type: "float" }
        }
        Method {
            name: "setQuadraticAttenuation"
            Parameter { name: "value"; type: "float" }
        }
        Method {
            name: "setLocalDirection"
            Parameter { name: "localDirection"; type: "QVector3D" }
        }
        Method {
            name: "setCutOffAngle"
            Parameter { name: "cutOffAngle"; type: "float" }
        }
    }
    Component {
        name: "Qt3DRender::QStencilMask"
        prototype: "Qt3DRender::QRenderState"
        Property { name: "frontOutputMask"; type: "uint" }
        Property { name: "backOutputMask"; type: "uint" }
        Signal {
            name: "frontOutputMaskChanged"
            Parameter { name: "frontOutputMask"; type: "uint" }
        }
        Signal {
            name: "backOutputMaskChanged"
            Parameter { name: "backOutputMask"; type: "uint" }
        }
        Method {
            name: "setFrontOutputMask"
            Parameter { name: "frontOutputMask"; type: "uint" }
        }
        Method {
            name: "setBackOutputMask"
            Parameter { name: "backOutputMask"; type: "uint" }
        }
    }
    Component {
        name: "Qt3DRender::QStencilOperation"
        prototype: "Qt3DRender::QRenderState"
        Property {
            name: "front"
            type: "Qt3DRender::QStencilOperationArguments"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "back"
            type: "Qt3DRender::QStencilOperationArguments"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "Qt3DRender::QStencilOperationArguments"
        prototype: "QObject"
        exports: ["Qt3D.Render/StencilOperationArguments 2.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "FaceMode"
            values: {
                "Front": 1028,
                "Back": 1029,
                "FrontAndBack": 1032
            }
        }
        Enum {
            name: "Operation"
            values: {
                "Zero": 0,
                "Keep": 7680,
                "Replace": 7681,
                "Increment": 7682,
                "Decrement": 7683,
                "IncrementWrap": 34055,
                "DecrementWrap": 34056,
                "Invert": 5386
            }
        }
        Property { name: "faceMode"; type: "FaceMode"; isReadonly: true }
        Property { name: "stencilTestFailureOperation"; type: "Operation" }
        Property { name: "depthTestFailureOperation"; type: "Operation" }
        Property { name: "allTestsPassOperation"; type: "Operation" }
        Signal {
            name: "stencilTestFailureOperationChanged"
            Parameter { name: "stencilFail"; type: "Operation" }
        }
        Signal {
            name: "depthTestFailureOperationChanged"
            Parameter { name: "depthFail"; type: "Operation" }
        }
        Signal {
            name: "allTestsPassOperationChanged"
            Parameter { name: "stencilDepthPass"; type: "Operation" }
        }
        Signal {
            name: "faceModeChanged"
            Parameter { name: "faceMode"; type: "FaceMode" }
        }
        Method {
            name: "setStencilTestFailureOperation"
            Parameter { name: "operation"; type: "Operation" }
        }
        Method {
            name: "setDepthTestFailureOperation"
            Parameter { name: "operation"; type: "Operation" }
        }
        Method {
            name: "setAllTestsPassOperation"
            Parameter { name: "operation"; type: "Operation" }
        }
    }
    Component {
        name: "Qt3DRender::QStencilTest"
        prototype: "Qt3DRender::QRenderState"
        Property {
            name: "front"
            type: "Qt3DRender::QStencilTestArguments"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "back"
            type: "Qt3DRender::QStencilTestArguments"
            isReadonly: true
            isPointer: true
        }
    }
    Component {
        name: "Qt3DRender::QStencilTestArguments"
        prototype: "QObject"
        exports: ["Qt3D.Render/StencilTestArguments 2.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Enum {
            name: "StencilFaceMode"
            values: {
                "Front": 1028,
                "Back": 1029,
                "FrontAndBack": 1032
            }
        }
        Enum {
            name: "StencilFunction"
            values: {
                "Never": 512,
                "Always": 519,
                "Less": 513,
                "LessOrEqual": 515,
                "Equal": 514,
                "GreaterOrEqual": 518,
                "Greater": 516,
                "NotEqual": 517
            }
        }
        Property { name: "faceMode"; type: "StencilFaceMode"; isReadonly: true }
        Property { name: "comparisonMask"; type: "uint" }
        Property { name: "referenceValue"; type: "int" }
        Property { name: "stencilFunction"; type: "StencilFunction" }
        Signal {
            name: "comparisonMaskChanged"
            Parameter { name: "comparisonMask"; type: "uint" }
        }
        Signal {
            name: "stencilFunctionChanged"
            Parameter { name: "stencilFunction"; type: "StencilFunction" }
        }
        Signal {
            name: "referenceValueChanged"
            Parameter { name: "referenceValue"; type: "int" }
        }
        Signal {
            name: "faceModeChanged"
            Parameter { name: "faceMode"; type: "StencilFaceMode" }
        }
        Method {
            name: "setComparisonMask"
            Parameter { name: "comparisonMask"; type: "uint" }
        }
        Method {
            name: "setReferenceValue"
            Parameter { name: "referenceValue"; type: "int" }
        }
        Method {
            name: "setStencilFunction"
            Parameter { name: "stencilFunction"; type: "StencilFunction" }
        }
    }
    Component {
        name: "Qt3DRender::QTechnique"
        prototype: "Qt3DCore::QNode"
        Property {
            name: "graphicsApiFilter"
            type: "Qt3DRender::QGraphicsApiFilter"
            isReadonly: true
            isPointer: true
        }
    }
    Component { name: "Qt3DRender::QTechniqueFilter"; prototype: "Qt3DRender::QFrameGraphNode" }
    Component { name: "Qt3DRender::QTexture1D"; prototype: "Qt3DRender::QAbstractTexture" }
    Component { name: "Qt3DRender::QTexture1DArray"; prototype: "Qt3DRender::QAbstractTexture" }
    Component { name: "Qt3DRender::QTexture2D"; prototype: "Qt3DRender::QAbstractTexture" }
    Component { name: "Qt3DRender::QTexture2DArray"; prototype: "Qt3DRender::QAbstractTexture" }
    Component {
        name: "Qt3DRender::QTexture2DMultisample"
        prototype: "Qt3DRender::QAbstractTexture"
    }
    Component {
        name: "Qt3DRender::QTexture2DMultisampleArray"
        prototype: "Qt3DRender::QAbstractTexture"
    }
    Component { name: "Qt3DRender::QTexture3D"; prototype: "Qt3DRender::QAbstractTexture" }
    Component { name: "Qt3DRender::QTextureBuffer"; prototype: "Qt3DRender::QAbstractTexture" }
    Component { name: "Qt3DRender::QTextureCubeMap"; prototype: "Qt3DRender::QAbstractTexture" }
    Component {
        name: "Qt3DRender::QTextureCubeMapArray"
        prototype: "Qt3DRender::QAbstractTexture"
    }
    Component {
        name: "Qt3DRender::QTextureImage"
        prototype: "Qt3DRender::QAbstractTextureImage"
        Enum {
            name: "Status"
            values: {
                "None": 0,
                "Loading": 1,
                "Ready": 2,
                "Error": 3
            }
        }
        Property { name: "source"; type: "QUrl" }
        Property { name: "status"; type: "Status"; isReadonly: true }
        Signal {
            name: "sourceChanged"
            Parameter { name: "source"; type: "QUrl" }
        }
        Signal {
            name: "statusChanged"
            Parameter { name: "status"; type: "Status" }
        }
        Method {
            name: "setSource"
            Parameter { name: "source"; type: "QUrl" }
        }
    }
    Component {
        name: "Qt3DRender::QTextureLoader"
        prototype: "Qt3DRender::QAbstractTexture"
        Property { name: "source"; type: "QUrl" }
        Signal {
            name: "sourceChanged"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method {
            name: "setSource"
            Parameter { name: "source"; type: "QUrl" }
        }
    }
    Component { name: "Qt3DRender::QTextureRectangle"; prototype: "Qt3DRender::QAbstractTexture" }
    Component {
        name: "Qt3DRender::QTextureWrapMode"
        prototype: "QObject"
        exports: ["Qt3D.Render/WrapMode 2.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "WrapMode"
            values: {
                "Repeat": 10497,
                "MirroredRepeat": 33648,
                "ClampToEdge": 33071,
                "ClampToBorder": 33069
            }
        }
        Property { name: "x"; type: "WrapMode" }
        Property { name: "y"; type: "WrapMode" }
        Property { name: "z"; type: "WrapMode" }
        Signal {
            name: "xChanged"
            Parameter { name: "x"; type: "WrapMode" }
        }
        Signal {
            name: "yChanged"
            Parameter { name: "y"; type: "WrapMode" }
        }
        Signal {
            name: "zChanged"
            Parameter { name: "z"; type: "WrapMode" }
        }
        Method {
            name: "setX"
            Parameter { name: "x"; type: "WrapMode" }
        }
        Method {
            name: "setY"
            Parameter { name: "y"; type: "WrapMode" }
        }
        Method {
            name: "setZ"
            Parameter { name: "z"; type: "WrapMode" }
        }
    }
    Component {
        name: "Qt3DRender::QViewport"
        prototype: "Qt3DRender::QFrameGraphNode"
        Property { name: "normalizedRect"; type: "QRectF" }
        Signal {
            name: "normalizedRectChanged"
            Parameter { name: "normalizedRect"; type: "QRectF" }
        }
        Method {
            name: "setNormalizedRect"
            Parameter { name: "normalizedRect"; type: "QRectF" }
        }
    }
    Component {
        name: "Qt3DRender::Render::Quick::Quick3DBuffer"
        defaultProperty: "data"
        prototype: "Qt3DRender::QBuffer"
        exports: ["Qt3D.Render/Buffer 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "data"; type: "QVariant" }
        Signal { name: "bufferDataChanged" }
        Signal { name: "bufferDataChanged" }
    }
    Component {
        name: "Qt3DRender::Render::Quick::Quick3DEffect"
        defaultProperty: "data"
        prototype: "Qt3DRender::QEffect"
        exports: ["Qt3D.Render/Effect 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "techniques"; type: "Qt3DRender::QTechnique"; isList: true; isReadonly: true }
        Property { name: "parameters"; type: "Qt3DRender::QParameter"; isList: true; isReadonly: true }
    }
    Component {
        name: "Qt3DRender::Render::Quick::Quick3DGeometry"
        defaultProperty: "attributes"
        prototype: "Qt3DRender::QGeometry"
        exports: ["Qt3D.Render/Geometry 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "attributes"; type: "Qt3DRender::QAttribute"; isList: true; isReadonly: true }
    }
    Component {
        name: "Qt3DRender::Render::Quick::Quick3DMaterial"
        defaultProperty: "data"
        prototype: "Qt3DRender::QMaterial"
        exports: ["Qt3D.Render/Material 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "parameters"; type: "Qt3DRender::QParameter"; isList: true; isReadonly: true }
    }
    Component {
        name: "Qt3DRender::Render::Quick::Quick3DParameter"
        defaultProperty: "data"
        prototype: "Qt3DRender::Render::Quick::Quick3DParameter"
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "childNodes"; type: "Qt3DCore::QNode"; isList: true; isReadonly: true }
    }
    Component {
        name: "Qt3DRender::Render::Quick::Quick3DRenderPass"
        defaultProperty: "data"
        prototype: "Qt3DRender::QRenderPass"
        exports: ["Qt3D.Render/RenderPass 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "filterKeys"; type: "Qt3DRender::QFilterKey"; isList: true; isReadonly: true }
        Property {
            name: "renderStates"
            type: "Qt3DRender::QRenderState"
            isList: true
            isReadonly: true
        }
        Property { name: "parameters"; type: "Qt3DRender::QParameter"; isList: true; isReadonly: true }
    }
    Component {
        name: "Qt3DRender::Render::Quick::Quick3DRenderPassFilter"
        defaultProperty: "data"
        prototype: "Qt3DRender::QRenderPassFilter"
        exports: ["Qt3D.Render/RenderPassFilter 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "matchAny"; type: "Qt3DRender::QFilterKey"; isList: true; isReadonly: true }
        Property { name: "parameters"; type: "Qt3DRender::QParameter"; isList: true; isReadonly: true }
    }
    Component {
        name: "Qt3DRender::Render::Quick::Quick3DRenderTargetOutput"
        defaultProperty: "data"
        prototype: "Qt3DRender::QRenderTarget"
        exports: ["Qt3D.Render/RenderTarget 2.0"]
        exportMetaObjectRevisions: [0]
        Property {
            name: "attachments"
            type: "Qt3DRender::QRenderTargetOutput"
            isList: true
            isReadonly: true
        }
    }
    Component {
        name: "Qt3DRender::Render::Quick::Quick3DRenderTargetSelector"
        defaultProperty: "data"
        prototype: "Qt3DRender::QRenderTargetSelector"
        exports: ["Qt3D.Render/RenderTargetSelector 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "drawBuffers"; type: "QVariantList" }
    }
    Component {
        name: "Qt3DRender::Render::Quick::Quick3DScene"
        defaultProperty: "data"
        prototype: "Qt3DRender::QSceneLoader"
        exports: ["Qt3D.Render/SceneLoader 2.0"]
        exportMetaObjectRevisions: [0]
    }
    Component {
        name: "Qt3DRender::Render::Quick::Quick3DShaderData"
        defaultProperty: "data"
        prototype: "Qt3DRender::Render::Quick::Quick3DShaderData"
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "childNodes"; type: "Qt3DCore::QNode"; isList: true; isReadonly: true }
    }
    Component {
        name: "Qt3DRender::Render::Quick::Quick3DShaderDataArray"
        defaultProperty: "values"
        prototype: "Qt3DCore::QNode"
        Property { name: "values"; type: "Qt3DRender::QShaderData"; isList: true; isReadonly: true }
    }
    Component {
        name: "Qt3DRender::Render::Quick::Quick3DStateSet"
        defaultProperty: "data"
        prototype: "Qt3DRender::QRenderStateSet"
        exports: ["Qt3D.Render/RenderStateSet 2.0"]
        exportMetaObjectRevisions: [0]
        Property {
            name: "renderStates"
            type: "Qt3DRender::QRenderState"
            isList: true
            isReadonly: true
        }
    }
    Component {
        name: "Qt3DRender::Render::Quick::Quick3DTechnique"
        defaultProperty: "data"
        prototype: "Qt3DRender::QTechnique"
        exports: ["Qt3D.Render/Technique 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "filterKeys"; type: "Qt3DRender::QFilterKey"; isList: true; isReadonly: true }
        Property { name: "renderPasses"; type: "Qt3DRender::QRenderPass"; isList: true; isReadonly: true }
        Property { name: "parameters"; type: "Qt3DRender::QParameter"; isList: true; isReadonly: true }
    }
    Component {
        name: "Qt3DRender::Render::Quick::Quick3DTechniqueFilter"
        defaultProperty: "data"
        prototype: "Qt3DRender::QTechniqueFilter"
        exports: ["Qt3D.Render/TechniqueFilter 2.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "matchAll"; type: "Qt3DRender::QFilterKey"; isList: true; isReadonly: true }
        Property { name: "parameters"; type: "Qt3DRender::QParameter"; isList: true; isReadonly: true }
    }
    Component {
        name: "Qt3DRender::Render::Quick::Quick3DTextureExtension"
        defaultProperty: "textureImages"
        prototype: "Qt3DRender::QTexture1D"
        exports: [
            "Qt3D.Render/Texture1D 2.0",
            "Qt3D.Render/Texture1DArray 2.0",
            "Qt3D.Render/Texture2D 2.0",
            "Qt3D.Render/Texture2DArray 2.0",
            "Qt3D.Render/Texture2DMultisample 2.0",
            "Qt3D.Render/Texture2DMultisampleArray 2.0",
            "Qt3D.Render/Texture3D 2.0",
            "Qt3D.Render/TextureBuffer 2.0",
            "Qt3D.Render/TextureCubeMap 2.0",
            "Qt3D.Render/TextureCubeMapArray 2.0",
            "Qt3D.Render/TextureLoader 2.0",
            "Qt3D.Render/TextureRectangle 2.0"
        ]
        exportMetaObjectRevisions: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        Property {
            name: "textureImages"
            type: "Qt3DRender::QAbstractTextureImage"
            isList: true
            isReadonly: true
        }
    }
    Component {
        name: "Qt3DRender::Render::Quick::Quick3DViewport"
        defaultProperty: "data"
        prototype: "Qt3DRender::QViewport"
        exports: ["Qt3D.Render/Viewport 2.0"]
        exportMetaObjectRevisions: [0]
    }
}
